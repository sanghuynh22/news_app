// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";

interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract SimToken is IERC20 {
    uint256 private _nonce;

    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 private _totalSupply;
    address private creater;
    mapping(address => uint256) private _balances;
    mapping(address => mapping (address => uint256)) private _allowances;

    constructor(uint256 initialSupply, string memory tokenName, string memory tokenSymbol, uint8 decimalUnits) {
        _totalSupply = initialSupply * 10 ** uint256(decimalUnits);
        _balances[msg.sender] = _totalSupply;
        name = tokenName;
        symbol = tokenSymbol;
        decimals = decimalUnits;
        creater = msg.sender;
        _nonce = 0;
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(_balances[msg.sender] >= amount, "ERC20: transfer amount exceeds balance");
        
        _balances[msg.sender] -= amount;
        _balances[recipient] += amount;
        
        emit Transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _allowances[msg.sender][spender] = amount;
        
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(_balances[sender] >= amount, "ERC20: transfer amount exceeds balance");
        require(_allowances[sender][msg.sender] >= amount, "ERC20: transfer amount exceeds allowance");
        
        _balances[sender] -= amount;
        _balances[recipient] += amount;
        
        emit Transfer(sender, recipient, amount);
        
        return true;
    }

    function nonce() public view returns (uint256) {
        return _nonce;
    }

    function withdraw(address to, uint amount, bytes memory signature) public {
        bytes32 messageHash = keccak256(abi.encodePacked(address(this), to, amount, _nonce));
        _nonce += 1;

        address signer = ECDSA.recover(ECDSA.toEthSignedMessageHash(messageHash), signature);
        require(signer == creater, "Signer is not creater");

        require(_balances[creater] >= amount, "ERC20: transfer amount exceeds balance");
        require(to != address(0), "ERC20: transfer to the zero address");

        _balances[creater] -= amount;
        _balances[to] += amount;

        emit Transfer(creater, to, amount);
    }
}
